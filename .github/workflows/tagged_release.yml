name: Tagged Release

on:
  push:
    tags:
      - "v*"

  workflow_dispatch:

env:
  # too much effort to read it from cargo.toml, and idk how to do it via action-rs
  PROJECT_NAME: curseforge_to_multimc

jobs:
  artifact:
    name: Atifact for ${{ matrix.job.os-name }}
    runs-on: ${{ matrix.job.os }}

    strategy:
      matrix:
        rust: [ stable ]
        job:
          - os: windows-latest
            os-name: windows
            target: x86_64-pc-windows-msvc
            architecture: x86_64
            binary-postfix: ".exe"
            use-cross: false
          - os: macos-latest
            os-name: macos
            target: x86_64-apple-darwin
            architecture: x86_64
            binary-postfix: ""
            use-cross: false

          # CurseForge doesn't support linux yet, so why build for it?
    #          - os: ubuntu-latest
    #            os-name: linux
    #            target: x86_64-unknown-linux-gnu
    #            architecture: x86_64
    #            binary-postfix: ""
    #            use-cross: false
    #          - os: ubuntu-latest
    #            os-name: linux
    #            target: aarch64-unknown-linux-gnu
    #            architecture: arm64
    #            binary-postfix: ""
    #            use-cross: true
    #          - os: ubuntu-latest
    #            os-name: linux
    #            target: i686-unknown-linux-gnu
    #            architecture: i686
    #            binary-postfix: ""
    #            use-cross: true

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Enviroment Variables
        shell: bash
        run: |
          echo "BASE_FILE_NAME=${{ env.PROJECT_NAME }}${{ matrix.job.binary-postfix }}" >> $GITHUB_ENV
          echo "ATRIFACT_NAME=${{ env.PROJECT_NAME }}-${{ matrix.job.os-name }}-${{ matrix.job.architecture }}" >> $GITHUB_ENV

      - name: Setup Enviroment Variables
        shell: bash
        run: |
          echo "FILE_NAME=${{ env.ATRIFACT_NAME }}${{ matrix.job.binary-postfix }}" >> $GITHUB_ENV

      - name: Setup Enviroment Variables
        shell: bash
        run: |
          echo "FILE_PATH=target/release/${{ env.FILE_NAME }}" >> $GITHUB_ENV

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true

      - name: Install Wix
        if: matrix.job.os-name == 'windows'
        run: cargo install cargo-wix

      - uses: Swatinem/rust-cache@v1

        # IDK how to exclude these from caching in the fist place, so I just delete them
      - name: Clean Cached Files
        shell: bash
        run: |
          rm -f target/release/${{ env.FILE_NAME }}
          cargo wix clean

      - name: Run Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          use-cross: ${{ matrix.job.use-cross }}
          toolchain: ${{ matrix.rust }}
          args: --release

      - name: Run Wix
        uses: actions-rs/cargo@v1
        if: matrix.job.os-name == 'windows'
        with:
          command: wix
          use-cross: ${{ matrix.job.use-cross }}
          toolchain: ${{ matrix.rust }}
          args: --nocapture --no-build

      - name: Rename Binaries
        shell: bash
        run: mv -f target/release/${{ env.BASE_FILE_NAME }} target/release/${{ env.FILE_NAME }}

      - name: Upload Application
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.ATRIFACT_NAME }}
          path: ${{ env.FILE_PATH }}
          retention-days: 1

      - name: Upload Application Installer
        if: matrix.job.os-name == 'windows'
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.ATRIFACT_NAME }}
          path: target/wix/*.msi
          retention-days: 1

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: artifact
    if: startsWith(github.ref, 'refs/tags/v') # Ignore this job if I do manual build for testing
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v2

      - name: Release Artifacts
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          prerelease: false
          files: |
            */*

